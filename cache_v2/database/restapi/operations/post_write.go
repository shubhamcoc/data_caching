// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostWriteHandlerFunc turns a function with the right signature into a post write handler
type PostWriteHandlerFunc func(PostWriteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostWriteHandlerFunc) Handle(params PostWriteParams) middleware.Responder {
	return fn(params)
}

// PostWriteHandler interface for that can handle valid post write params
type PostWriteHandler interface {
	Handle(PostWriteParams) middleware.Responder
}

// NewPostWrite creates a new http.Handler for the post write operation
func NewPostWrite(ctx *middleware.Context, handler PostWriteHandler) *PostWrite {
	return &PostWrite{Context: ctx, Handler: handler}
}

/* PostWrite swagger:route POST /write postWrite

Save data in database

*/
type PostWrite struct {
	Context *middleware.Context
	Handler PostWriteHandler
}

func (o *PostWrite) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostWriteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
